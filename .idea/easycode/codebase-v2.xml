<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/main/java/org/appiumproject/Main.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/pages/common/CookieObject.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/pages/common/FooterObject.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/pages/common/MenuObject.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/pages/CoinDetailPage.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/pages/HomepageObject.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/pages/LoginpageObject.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/pages/MarketpageObject.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/stepdefs/CoinDetailPageStepDef.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/stepdefs/HomepageStepDef.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/stepdefs/LoginpageStepDef.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/stepdefs/MarketpageStepDef.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/utils/DriverFactory.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/utils/Helpers.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/src/test/java/utils/TestRunner.java;/Users/user/Desktop/Personal/Blockchain-Web-Project/pom.xml" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;/Users/user/Desktop/Personal/Blockchain-Web-Project&quot;:&quot;{\&quot;/src/test/java/utils/TestRunner.java\&quot;:\&quot;This TestRunner.java file is used to run Cucumber test cases.\\n\\nKey functions:\\n\\n- It is annotated with @RunWith(Cucumber.class) which tells JUnit to run Cucumber feature files.\\n\\n- @CucumberOptions annotation provides configuration for Cucumber runner:\\n\\n  - features specifies the path to feature files\\n\\n  - glue specifies the packages containing step definitions and hooks\\n\\n  - plugin specifies plugins to generate reports in different formats like pretty console output and HTML report\\n\\n- When this class is run, it will execute all the feature files located under src/test/resources/features \\n\\n- The step definitions from stepdefs package will be used to match and execute the steps in features\\n\\n- Reporting plugins like pretty and html will generate console output and HTML report at target/cucumber-reports location\\n\\n- It acts as a test runner class to execute all Cucumber test cases and generate necessary reports\\n\\nSo in summary, this TestRunner class configures and runs the Cucumber test suite, ties the step definitions to features, and generates different reports.\&quot;,\&quot;/src/test/java/pages/MarketpageObject.java\&quot;:\&quot;This file defines a MarketpageObject class that represents the market page in a web application.\\n\\nIt is a page object model class that encapsulates the elements and actions that can be performed on the market page.\\n\\nKey functions:\\n\\n- marketPage() - Initializes the page factory and waits for the main market page element to be visible. Returns the main market page element.\\n\\n- selectSpotMarket() - Clicks on the \\\&quot;Spot/Margin Market\\\&quot; section to select it. \\n\\n- selectCoin() - Searches for a coin element by text, scrolls it into view if needed, waits for it to be clickable, and clicks it to select the coin.\\n\\nThe purpose of this class is to abstract away the implementation details of finding and interacting with elements on the market page. It provides a clean API for tests to perform common actions like selecting market types and coins without having to deal with locating elements directly.\&quot;,\&quot;/src/test/java/pages/LoginpageObject.java\&quot;:\&quot;This LoginpageObject.java file defines a page object model class for the login page.\\n\\nKey things it does:\\n\\n- Defines locators for login page elements using @FindBy annotation\\n- Initializes the page factory with the driver \\n- Defines methods to represent actions on the page:\\n  - LoginForm() - Gets the login form element\\n  - loginInvalidCredentials() - Logs in with invalid credentials\\n  - verifyLoginErrorMessage() - Verifies error message is displayed\\n\\nKey functions:\\n\\n- LoginForm() - Gets the login form element \\n- loginInvalidCredentials() - Logs in with invalid credentials\\n- verifyLoginErrorMessage() - Verifies error message is displayed after invalid login\\n- Constructor initializes the page factory and waits for page load\\n\\nSo in summary, it defines a page object class to represent and interact with the login page in a object-oriented way using locators, page factory and methods to model user flows and assertions.\&quot;,\&quot;/src/main/java/org/appiumproject/Main.java\&quot;:\&quot;This Java file contains a simple \\\&quot;Hello World\\\&quot; style program to demonstrate some basic IntelliJ IDEA features:\\n\\n- It defines a Main class with a main() method, which is the entry point for a Java application.\\n\\n- main() prints a greeting message using System.out.printf().\\n\\n- It contains a for loop that prints the numbers 1 to 5 using System.out.println().\\n\\n- Comments provide instructions on how to use some IntelliJ features like showing whitespaces, auto-fixing code, running the program, and debugging.\\n\\nKey functions:\\n\\n- Defines a Java class (Main) \\n- Contains the main() method which is the application entry point\\n- Prints output to the console using System.out.printf() and System.out.println()\\n- Includes a for loop to demonstrate looping logic\\n- Comments show how to use IntelliJ features like formatting, running, debugging etc.\\n- Provides a simple program structure to test IntelliJ functionality\\n\\nSo in summary, it\\u0027s a basic \\\&quot;Hello World\\\&quot; Java app that also serves to demonstrate IntelliJ IDEA features through embedded comments.\&quot;,\&quot;/src/test/java/pages/HomepageObject.java\&quot;:\&quot;This Java file defines a HomepageObject class that represents the homepage in a web application.\\n\\nIt is used for page object modeling in Selenium tests. Page object modeling helps separate the UI code from the test code for better organization and maintenance.\\n\\nKey things this file does:\\n\\n- Defines a HomepageObject class that will represent the homepage\\n- Takes a WebDriver instance in the constructor to initialize the page \\n- Initializes a Helpers object to reuse common helper methods\\n- Waits for the page to fully load using the Helpers waitPageLoad method\\n\\nSome key functions it provides:\\n\\n- Constructor to initialize the page with a WebDriver\\n- Implicitly provides access to the underlying WebDriver via the driver field\\n- Helpers object to reuse common helper methods like waits\\n- No explicit page interactions defined yet, but it sets up the object to interact with the homepage elements\\n\\nSo in summary, it sets up a page object class to represent and interact with the homepage in a structured, reusable way for Selenium tests. Individual page interactions would be defined as methods on this class.\&quot;,\&quot;/src/test/java/stepdefs/CoinDetailPageStepDef.java\&quot;:\&quot;This Java file defines step definitions for Cucumber test scenarios related to the coin detail page.\\n\\nKey things it does:\\n\\n- Imports Cucumber annotations and page object classes needed\\n- Defines a CoinDetailPageStepDef class \\n- Initializes the WebDriver and CoinDetailPage page object in the constructor\\n- Defines a step definition method annotated with @Then\\n- The method calls the verifyCoinPage() method on the CoinDetailPage object to validate elements on the coin detail page\\n\\nKey functions:\\n\\n- Constructor: Initializes WebDriver and CoinDetailPage page object\\n- iShouldVerifyCoinDetailPage(): Defines Cucumber step to validate coin detail page elements by calling page object method\\n- Uses the DriverFactory class to get the shared WebDriver instance\\n- Uses the CoinDetailPage page object class to encapsulate coin detail page interactions\\n\\nSo in summary, it defines a Cucumber step definition to validate the coin detail page by leveraging the page object model pattern and shared WebDriver instance.\&quot;,\&quot;/src/test/java/pages/common/FooterObject.java\&quot;:\&quot;This FooterObject class is for interacting with and testing the footer section of a web page.\\n\\nKey functions:\\n\\n- Constructor that initializes the WebDriver and Helpers instance\\n\\n- AboutUs() method that finds the footer menu element \\n\\n- clickRandomlyFooterLinks() method that randomly selects and clicks links in the footer menu\\n\\n- randomSelection() method that:\\n\\n  - Finds all footer link elements\\n\\n  - Removes the element at the current index \\n\\n  - Loops through the remaining elements\\n\\n  - Picks a random index\\n\\n  - Clicks the link at that index\\n\\n  - Verifies the URL matches\\n\\n  - Navigates back\\n\\n- realSelection() method that is currently empty but will likely iterate through the footer links in order rather than randomly\\n\\nSo in summary, it provides methods to interact with and test the footer links by either randomly clicking them or iterating through them in order. The randomSelection method is the key implementation for randomly testing the footer links.\&quot;,\&quot;/src/test/java/utils/Helpers.java\&quot;:\&quot;This Helpers.java file contains utility methods for interacting with the WebDriver and waiting for elements/conditions.\\n\\nKey functions:\\n\\n- waitNewTab() - Waits for a new tab to open\\n- waitStalenessElementExistence() - Waits for an element to be refreshed/stale element exception to occur  \\n- waitStalenessElementExistenceElement() - Same as above but takes a WebElement\\n- scrollUntilView() - Scrolls an element into view\\n- waitElementExistence() - Waits for an element to be visible by ID\\n- waitElementExistenceByCss() - Waits for an element to be visible by CSS \\n- waitElementExistsAndClickable() - Waits for element to be visible and clickable by ID\\n- waitElementClickableByXpath() - Waits for element to be clickable by XPath\\n- waitPageLoad() - Waits for page to finish loading\\n- waitForElementVisibility() - Waits for an element to be visible\\n- neWait() - Waits for an element to be visible ignoring stale exceptions\\n\\nIn summary, it contains common Selenium wait and visibility check methods to be reused across tests. The PageFactory initialization allows injecting the WebDriver into page objects.\&quot;,\&quot;/src/test/java/stepdefs/HomepageStepDef.java\&quot;:\&quot;This file contains Cucumber step definitions for interacting with the homepage of a website.\\n\\nKey things it does:\\n\\n- Initializes the WebDriver driver that will be used to interact with the page\\n- Initializes page object classes that represent elements on the homepage like cookies, menu, footer\\n\\nKey functions:\\n\\n- iGoToTheLoginPage - Sets up the initial homepage state \\n- iAcceptCookies - Accepts any cookie prompts using the CookieObject\\n- iClickNavigateToMarketsPage - Clicks the markets menu item \\n- iClickNavigateToSpotSubMenu - Clicks the spot trading submenu\\n- iClickLoginButton - Clicks the login button in the menu\\n- iClickRandomlyFooterLinks - Clicks random links in the footer for testing\\n\\nSo in summary, it ties Cucumber steps to actions that can be performed on the homepage like interacting with menus, cookies, footer links using the page object model pattern and Selenium WebDriver. This allows Cucumber tests to drive the browser automation and interact with the homepage.\&quot;,\&quot;/src/test/java/pages/common/MenuObject.java\&quot;:\&quot;This MenuObject.java file defines a page object model class for interacting with the menu/navigation elements on the page.\\n\\nKey things it does:\\n\\n- Defines @FindBy annotations to locate common menu elements like the header menu\\n- Initializes the page factory with the driver \\n- Defines helper methods to interact with menu items:\\n  - clickMarketMenu()\\n  - clickSpotSubMenu()\\n  - clickLoginButton()\\n- These methods use the located elements to click on specific menu links/buttons\\n\\nThe key functions are:\\n\\n- MenuForm() - Returns the initialized header menu element \\n- clickMarketMenu() - Clicks the Markets menu item\\n- clickSpotSubMenu() - Clicks the Spot sub-menu item \\n- clickLoginButton() - Clicks the login button\\n\\nSo in summary, it provides a reusable object to interact with common menu elements across tests without having to re-locate them each time. The page factory pattern is used to initialize the elements.\&quot;,\&quot;/src/test/java/stepdefs/MarketpageStepDef.java\&quot;:\&quot;This Java file contains Cucumber step definitions for interacting with the market page.\\n\\nKey things it does:\\n\\n- Initializes the WebDriver driver instance \\n- Initializes the MarketpageObject which will be used to interact with the market page elements\\n- Defines a @When annotated method iSelectSpotMarketSection() that calls the selectSpotMarket() method on the MarketpageObject to select the spot market section\\n- Defines a @When annotated method iClickCoin() that calls the selectCoin() method on the MarketpageObject to click on a coin\\n\\nSo in summary:\\n\\n- Sets up the page object and driver \\n- Maps Cucumber steps to methods that interact with the market page object\\n- Allows interacting with and verifying elements on the market page in Cucumber tests\\n\\nThe main functions are:\\n\\n1. Initialize the page object and driver\\n2. Map Cucumber steps to page object methods \\n3. Interact with the market page via the page object methods\&quot;,\&quot;/src/test/java/utils/DriverFactory.java\&quot;:\&quot;This DriverFactory.java file is used to manage the WebDriver instance in Cucumber tests.\\n\\nKey functions:\\n\\n- getDriver() - Static method that returns the WebDriver instance. If driver is null, it initializes it by calling initializeDriver().\\n\\n- initializeDriver() - Initializes the WebDriver before any tests run. It sets the ChromeDriver path, adds incognito argument to ChromeOptions, creates ChromeDriver instance and sets implicit wait timeout.\\n\\n- quitDriver() - Shuts down the WebDriver after all tests have run. It closes and quits the driver and sets it to null. \\n\\nSo in summary:\\n\\n- It initializes the WebDriver before any tests using @Before hook\\n- Provides a static getDriver() method to access the driver instance from tests\\n- Shuts down the driver after all tests using @After hook \\n- Manages the WebDriver as a singleton to avoid creating multiple instances\\n\\nThis allows Cucumber tests to reuse the same WebDriver session and clean it up after all tests are done.\&quot;,\&quot;/src/test/java/pages/common/CookieObject.java\&quot;:\&quot;This CookieObject class is used to handle cookie consent banners on pages.\\n\\nKey functions:\\n\\n- acceptCookies() - Finds the \\\&quot;Accept\\\&quot; button element and clicks it to accept cookies.\\n\\n- cookieForm() - Initializes the page factory and waits for the cookie banner element to exist before returning it. \\n\\n- The constructor initializes the WebDriver, Helpers class and waits for the page to load fully.\\n\\n- It uses PageFactory to initialize the @FindBy annotated WebElement for the cookie banner. \\n\\n- Helpers class is used to wait for elements to exist/be clickable before interacting with them.\\n\\nSo in summary, this class encapsulates the logic to find and accept cookies on pages in a reusable way. The acceptCookies() method can be called from tests to handle accepting cookies before interacting with the page.\&quot;,\&quot;/src/test/java/stepdefs/LoginpageStepDef.java\&quot;:\&quot;This Java file contains Cucumber step definitions for login page testing.\\n\\nKey things it does:\\n\\n- Initializes the WebDriver driver object by calling the DriverFactory class.\\n\\n- Initializes the LoginpageObject which will contain page object methods for interacting with the login page. \\n\\n- Defines a Cucumber step \\\&quot;@When I login invalid credentials\\\&quot; which calls the loginInvalidCredentials method on the LoginpageObject to login with invalid credentials.\\n\\n- Defines a Cucumber step \\\&quot;@When I should verify login error message\\\&quot; which calls the verifyLoginErrorMessage method on the LoginpageObject to validate an error message is displayed after invalid login attempt. \\n\\n- The LoginpageObject class (not shown) would contain the actual page object methods like findElements, enterText, verifyText etc to automate interacting with the login page.\\n\\nSo in summary, it:\\n\\n1. Initializes page objects \\n2. Maps Cucumber steps to page object methods\\n3. Allows running and validating login page scenarios using Cucumber steps\&quot;,\&quot;/pom.xml\&quot;:\&quot;This is a pom.xml file which is used by Maven to manage the build, dependencies and artifacts of a Java project.\\n\\nKey functions of the pom.xml file:\\n\\n- Defines the project metadata like groupId, artifactId, version etc. This identifies the project.\\n\\n- Defines dependencies on external libraries like Selenium, JUnit, Cucumber etc that are required for the project. This allows Maven to download the dependencies. \\n\\n- Specifies the plugins needed to build and run the project like maven-compiler-plugin.\\n\\n- Configures build properties like source and target Java version, encoding etc. \\n\\n- Manages the project lifecycle and coordinates tasks like compiling, testing, packaging, deployment etc. \\n\\n- Provides a standard directory structure for the project code and resources.\\n\\n- Allows easy sharing of the project code/artifacts through Maven central repository.\\n\\nSo in summary, the pom.xml file provides build automation, dependency management and standardization for the Java project using Maven. It glues all the project configurations together.\&quot;,\&quot;/src/test/java/pages/CoinDetailPage.java\&quot;:\&quot;This CoinDetailPage.java file is a page object class for the coin detail page in a cryptocurrency trading application.\\n\\nKey functions:\\n\\n- Constructor that initializes the WebDriver and Helpers utility class\\n- MenuForm() method that initializes page elements using PageFactory and returns the coin detail page element  \\n- verifyCoinPage() method that verifies the correct coin page is displayed by:\\n  - Switching to the new tab opened for the coin detail page\\n  - Getting the coin name from the h1 element\\n  - Asserting it matches the expected coin name\\n\\nSo in summary, this page object class:\\n\\n1. Encapsulates elements and actions specific to the coin detail page\\n2. Allows initializing and interacting with coin detail page elements \\n3. Provides a method to verify the correct coin page is displayed\\n\\nThis helps with maintainable and reusable automation of tests involving the coin detail page.\&quot;}&quot;}" />
  </component>
</project>